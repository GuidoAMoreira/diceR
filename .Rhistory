function(object, ...){
s <- function(name) methods::slot(x, name)
cat("Dice rolls:",describeDice(object), "\n")
m <- mean(object)
cat("Expected value:", m, "\n")
varDice <- sum(s("values")^2 * s("probabilities")) -
m^2
cat("Standard deviation:", sqrt(varDice))
})
methods::setMethod("summary", methods::signature(x = "dice"),
function(object, ...){
s <- function(name) methods::slot(object, name)
cat("Dice rolls:",describeDice(object), "\n")
m <- mean(object)
cat("Expected value:", m, "\n")
varDice <- sum(s("values")^2 * s("probabilities")) -
m^2
cat("Standard deviation:", sqrt(varDice))
})
methods::setMethod("summary", methods::signature(object = "dice"),
function(object, ...){
s <- function(name) methods::slot(object, name)
cat("Dice rolls:",describeDice(object), "\n")
m <- mean(object)
cat("Expected value:", m, "\n")
varDice <- sum(s("values")^2 * s("probabilities")) -
m^2
cat("Standard deviation:", sqrt(varDice))
})
summary(d1)
#### Summaries ####
methods::setMethod("mean", methods::signature(x = "dice"),
function(x, ...){
s <- function(name) methods::slot(x, name)
sum(s("values") * s("probabilities"))
})
mean.dice <- function(x, ...) mean(x)
methods::setMethod("summary", methods::signature(object = "dice"),
function(object, ...){
s <- function(name) methods::slot(object, name)
cat("Dice rolls:",describeDice(object), "\n")
m <- mean(object)
cat("Expected value:", m, "\n")
varDice <- sum(s("values")^2 * s("probabilities")) -
m^2
cat("Standard deviation:", sqrt(varDice))
})
summary(d1)
summary(dice())
mean(d1)
mean(d2)
table(d1$roll(100))
table(d1$roll(100))[1]
table(d1$roll(100))[5]
methods::setMethod("initialize", "dice", function(.Object, dn, ds, b){
s <- function(name) methods::slot(.Object, name)
methods::slot(.Object, "dice_numbers") <- as.integer(dn)
methods::slot(.Object, "dice_sides") <- as.integer(ds)
methods::slot(.Object, "bonus") <- b
# values slot
minRoll = sum(dn) + b
maxRoll = sum(dn * ds) + b
v <- minRoll:maxRoll
methods::slot(.Object, "values") = v
# probabilities slot
possibilities <- expand.grid(
do.call(c,lapply(1:length(dn),function(i){
d <- 1:ds[i]
l <- list()
for (j in 1:dn[i]) l <- c(l, list(d))
l
}))
)
possibilities <- rowSums(possibilities) + b
probPerRow <- exp(- sum(dn * log(ds)))
probs <- probPerRow * table(possibilites)
#probs <- rep(0, length(v))
#for (i in 1:length(v)) probs[i] <- probPerRow * sum(possibilities == v[i])
methods::slot(.Object, "probabilities") <- probs
.Object
})
d1 = 2%d%8+1
d2 = 3%d%6
methods::setMethod("initialize", "dice", function(.Object, dn, ds, b){
s <- function(name) methods::slot(.Object, name)
methods::slot(.Object, "dice_numbers") <- as.integer(dn)
methods::slot(.Object, "dice_sides") <- as.integer(ds)
methods::slot(.Object, "bonus") <- b
# values slot
minRoll = sum(dn) + b
maxRoll = sum(dn * ds) + b
v <- minRoll:maxRoll
methods::slot(.Object, "values") = v
# probabilities slot
possibilities <- expand.grid(
do.call(c,lapply(1:length(dn),function(i){
d <- 1:ds[i]
l <- list()
for (j in 1:dn[i]) l <- c(l, list(d))
l
}))
)
possibilities <- rowSums(possibilities) + b
probPerRow <- exp(- sum(dn * log(ds)))
probs <- probPerRow * table(possibilities)
#probs <- rep(0, length(v))
#for (i in 1:length(v)) probs[i] <- probPerRow * sum(possibilities == v[i])
methods::slot(.Object, "probabilities") <- probs
.Object
})
d1 = 2%d%8+1
d2 = 3%d%6
d1 = 2%d%8+1
d1
a = table(d1$roll(100))
a
is(a)
as.numeric(a)
is(as.numeric(a))
methods::setMethod("initialize", "dice", function(.Object, dn, ds, b){
s <- function(name) methods::slot(.Object, name)
methods::slot(.Object, "dice_numbers") <- as.integer(dn)
methods::slot(.Object, "dice_sides") <- as.integer(ds)
methods::slot(.Object, "bonus") <- b
# values slot
minRoll = sum(dn) + b
maxRoll = sum(dn * ds) + b
v <- minRoll:maxRoll
methods::slot(.Object, "values") = v
# probabilities slot
possibilities <- expand.grid(
do.call(c,lapply(1:length(dn),function(i){
d <- 1:ds[i]
l <- list()
for (j in 1:dn[i]) l <- c(l, list(d))
l
}))
)
possibilities <- rowSums(possibilities) + b
probPerRow <- exp(- sum(dn * log(ds)))
probs <- probPerRow * as.numeric(table(possibilities))
#probs <- rep(0, length(v))
#for (i in 1:length(v)) probs[i] <- probPerRow * sum(possibilities == v[i])
methods::slot(.Object, "probabilities") <- probs
.Object
})
d1 = 2%d%8+1
d2 = 3%d%6
dalot = 2%d%8 + 3%d%6 + 14 + 1%d%100
methods::setMethod("initialize", "dice", function(.Object, dn, ds, b){
methods::slot(.Object, "dice_numbers") <- as.integer(dn)
methods::slot(.Object, "dice_sides") <- as.integer(ds)
methods::slot(.Object, "bonus") <- b
# values slot
minRoll = sum(dn) + b
maxRoll = sum(dn * ds) + b
v <- minRoll:maxRoll
methods::slot(.Object, "values") = v
# probabilities slot
possibilities <- rowSums(expand.grid(
do.call(c,lapply(1:length(dn),function(i){
d <- 1:ds[i]
l <- list()
for (j in 1:dn[i]) l <- c(l, list(d))
l
}))
))
probPerRow <- exp(- sum(dn * log(ds)))
probs <- probPerRow * as.numeric(table(possibilities))
methods::slot(.Object, "probabilities") <- probs
.Object
})
dalot = 2%d%8 + 3%d%6 + 14 + 1%d%100
dalot
dalot$roll(5)
plot(dalot)
max(dalot$distribution[,2])
methods::setMethod("$", methods::signature(x = "dice"),
function(x, name)
if (name == "description")
describeDice(x)
else if (name == "distribution"){
s <- function(n) methods::slot(x, n)
data.frame(
value = s("values"),
probability = s("probabilities")
)
}
else if (name == "roll") function(n = 1){
s <- function(name) methods::slot(x, name)
sample(s("values"), n, TRUE, prob = s("probabilities"))
})
dalot$distribution$value
d1 = 2%d%8+1
d1
d1$description
d1$distribution
d1$roll(10)
plot(d1)
d2 = 3%d%6
d2$description
plot(d2)
dalot = 2%d%8 + 3%d%6 + 14 + 1%d%100
plot(dalot)
hist(dalot$roll(1e5), breaks = 100)
hist(dalot$roll(1e5), breaks = 100)
hist(dalot$roll(1e5), breaks = 100)
hist(dalot$roll(1e5), breaks = 100)
hist(dalot$roll(1e5), breaks = 100)
d1 <= d2
d2 >= d1
`%in%`
match
source("R/dice-class.R")
source("R/utils.R")
source("R/dice-class.R")
source("R/utils.R")
d1 = 2%d%8+1
d2 = 3%d%6
dalot = 2%d%8 + 3%d%6 + 14 + 1%d%100
100%d%100
1%d%100
10%d%100
100^10
d1$description
d2$description
d1 <= d2
d2 >= d1
d1
sum(3:7 == d1)
3:7 == d1
100%d%8
100%d%4
100%d%2
2^100
10%d%2
10%d%10
10^10
10%d%4
4%d%4+4
d1$description
plot(d1)
sum(3:7 == d1)
sum(3:12 == d1)
3:12 == d1
sum(3:10 == d1)
3:10 == d1
source("R/dice-class.R")
source("R/utils.R")
3:10 == d1
sum(3:10 == d1)
3:10 < d1
3:10 == 2
3:10 == d2
d2
d2$description
3:10 == d2
3:10 == dalot
dalot = 2%d%8 + 3%d%6 + 14 + 1%d%100
3:10 == dalot
dalot
s("values")
dalot@values
source("R/dice-class.R")
source("R/utils.R")
3:10 == dalot
dalot$description
min
methods(min)
a = 2:3
class(a) = "guido"
min.guido = function(x) max(x)
min(a)
min.guido = function(x, na.rm = FALSE) max(x, na.rm)
min(a)
rm(min.guido)
mean(d1)
mean(d2)
source("R/dice-class.R")
source("R/utils.R")
min(d1)
min(dalot)
summary(dalot)
source("R/dice-class.R")
source("R/utils.R")
summary(d1)
summary(dalot)
sd(d1)
var(d1)
var
as.double(d1)
na.method
dice::getEventProb
choose(4,2)
choose
?choose
3:10 == dalot
d1
d1$description
d2$description
3:10 == d1
3:10 == d2
d2 > 3
d2 >= 3
d2 == 3
d1 > 3
d1 > d2
d1 >== d2
d1 >= d2
d2 >= d1
d1$description
d2$description
d3 = 3%d%8 - 3
d2 >= d3
d2 == d3
plot(d3)
dalot$description
dalot$roll()
dalot$roll()
dalot$roll(10)
dalot$roll
summary(dalot)
min(dalot)
max(dalot)
3:10 == dalot
3:10 == d2
3:10 == d1
d1$description
3:10 == d1
source("R/dice-class.R")
source("R/utils.R")
1%d%20+9 >= 1%d%20+1
450*8
plot(PandemicLP::load_covid("Portugal"))
library(PandemicLP)
pt = load_covid("Portugal")
pt_est = pandemic_model(pt, n_waves = 4)
pt_pred = posterior_predict(pt_est)
plot(pt_pred)
pt_pred = posterior_predict(pt_est,horizonLong = 50)
plot(pt_pred)
floor(39/4*(1:3)) + 1
pt = load_covid("Portugal"); plot(pt)
f <- function(p) 1/(1/p+1)
library(dplyr)
library(ggplot2)
data.frame(p = seq(1e-10, 3, len = 100),
percent <- f(p))
p = seq(1e-10, 3, len = 100)
data.frame(p = p,
percent <- f(p)) %>%
ggplot(aes(p, percent)) + theme_bw() + geom_line()
f.inv <- function(percent) 1 / (1 / percent - 1)
f(f.inv(0.5))
f(f.inv(0.6))
f(f.inv(1))
f.inv(1)
f.inv(0.9)
f.inv(0.95)
f(20)
f(0.5)
f.inv(0.5)
data.frame(p = p, percent <- f(p)) %>%
ggplot(aes(p, percent)) + theme_bw() + geom_line() +
labs(x = "Damage in % of missing health", y = "Maximum percent health to die")
data.frame(p = p, percent <- f(p)) %>%
ggplot(aes(p, percent)) + theme_bw() + geom_line() +
labs(x = "Damage in % of missing health", y = "Maximum % health to die")
data.frame(p = p, percent <- f(p)) %>%
ggplot(aes(100 * p, percent)) + theme_bw() + geom_line() +
labs(x = "Damage in % of missing health", y = "Maximum % health to die")
p = seq(1e-10, 1-1e-10, len = 100)
data.frame(p = p, percent <- f.inv(p)) %>%
ggplot(aes(100 * p, percent)) + theme_bw() + geom_line() +
labs(y = "Damage in % of missing health", x = "Maximum % health to die")
data.frame(p = p, percent <- f.inv(p)) %>%
ggplot(aes(p, percent)) + theme_bw() + geom_line() +
labs(y = "Damage in % of missing health", x = "Maximum % health to die")
p = seq(1e-10, 0.99, len = 100)
data.frame(p = p, percent <- f.inv(p)) %>%
ggplot(aes(p, percent)) + theme_bw() + geom_line() +
labs(y = "Damage in % of missing health", x = "Maximum % health to die")
p = seq(1e-10, 3, len = 100)
data.frame(p = p, percent <- f(p)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(x = "Damage in % of missing health", y = "Maximum % health to die")
p = seq(1e-10, 0.99, len = 100)
data.frame(p = p, percent <- f.inv(p)) %>%
ggplot(aes(p, percent)) + theme_bw() + geom_line() +
labs(y = "Damage in % of missing health", x = "Maximum % health to die")
data.frame(p = p, percent <- f.inv(p)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(y = "Damage in % of missing health", x = "Maximum % health to die")
p = seq(1e-10, 3, len = 100)
data.frame(p = p, percent <- f(p)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(x = "Damage in % of missing health", y = "Maximum % health to die")
seq(1e-10, 3, len = 100) %>%
data.frame(p = ., percent <- f(.)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(x = "Damage in % of missing health", y = "Maximum % health to die")
seq(1e-10, 0.99, len = 100) %>%
data.frame(p = ., percent <- f.inv(.)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(y = "Damage in % of missing health", x = "Maximum % health to die")
rm(p)
seq(1e-10, 0.99, len = 100) %>%
data.frame(p = ., percent <- f.inv(.)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(y = "Damage in % of missing health", x = "Maximum % health to die")
seq(1e-10, 3, len = 100) %>%
data.frame(p = ., percent <- f(.)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(x = "Damage in % of missing health", y = "Maximum % health to die")
seq(1e-10, 0.99, len = 100) %>%
data.frame(p = ., percent <- f.inv(.))
f.inv(seq(1e-10, 0.99, len = 100))
seq(1e-10, 0.99, len = 100) %>%
data.frame(p = ., percent <- f.inv(.)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(y = "Damage in % of missing health", x = "Maximum % health to die")
seq(1e-10, 0.99, len = 500) %>%
data.frame(p = ., percent <- f.inv(.)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(y = "Damage in % of missing health", x = "Maximum % health to die")
p
percent
rm(percent)
percent
seq(1e-10, 0.99, len = 500) %>%
data.frame(p = ., percent <- f.inv(.)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(y = "Damage in % of missing health", x = "Maximum % health to die")
seq(1e-10, 0.99, len = 500) %>%
data.frame(p = ., percent <- f.inv(.))
seq(1e-10, 0.99, len = 500) %>%
data.frame(p = ., percent = f.inv(.)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(y = "Damage in % of missing health", x = "Maximum % health to die")
seq(1e-10, 3, len = 100) %>%
data.frame(p = ., percent = f(.)) %>%
ggplot(aes(100 * p, 100 * percent)) + theme_bw() + geom_line() +
labs(x = "Damage in % of missing health", y = "Maximum % health to die")
500/350*1.86
library(PandemicLP)
pt = load_covid("Portugal"); plot(pt)
source("R/dice-class.R")
source("R/utils.R")
2%d%6+2 >= 1%d%8+4
2%d%6+2 <= 1%d%8+4
2%d%6 <= 1%d%8
2%d%6 >= 1%d%8
2%d%6+2 <= 1%d%8+5
2%d%6+2 >= 1%d%8+5
2%d%6 == 7
(2%d%6 == 7) * 6
2%d%6 == 7:8
plot(PandemicLP::load_covid("Portugal"))
lfactorial(1:20)
lfactorial(100)
cumsum(log(1:20))
microbenchmark::microbenchmark(lfactorial(1:20), cumsum(log(1:20)))
microbenchmark::microbenchmark(lfactorial(20), sum(log(1:20)))
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.packages("ks")
install.packages("plot3D")
install.packages("plot3D")
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.packages("Rgraphviz")
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
install.packages("graph")
BiocManager::install("graph")
getOption("repos")
is(getOption("repos"))
Diagonal
source
source("R/dice-class.R")
source("R/utils.R")
2*dice(8) < 12
plot(2*dice(8))
dmg <- 2%d%8
dmg$description
dmg$distribution
dmg$roll(5)
dmg > 2%d%6+2
dmg2 <- 2%d%6+2
plot(dmg2)
mean(dmg2)
mean(dmg)
dmg2$description
cat(dmg2$description)
(3%d%6 - 3)$description
(3%d%6 - 3 + 4)$description
mean(3%d%6 - 3 + 4)
(3%d%6 - 3 + 4) > dmg
pbinom(3, 7, 0.5)
pbinom(2, 7, 0.5)
source("R/dice-class.R")
source("R/utils.R")
dmg <- 2%d%8
dmg$description
dmg$roll(10)
plot(dmg)
source("R/dice-class.R")
source("R/utils.R")
3*dice(4) > 2*dice(6)
3*dice(4) >= 2*dice(6)
3*dice(4) < 2*dice(6)
3*dice(4) == 2*dice(6)
3*dice(4) - 2*dice(6)
